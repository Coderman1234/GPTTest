/app/static/css/main.css: "/* Email Campaign */
.email-campaign {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    border: 1px solid #eaeaea;
    background-color: #f8f8f8;
    font-family: Arial, sans-serif;
}

.email-header {
    padding-bottom: 15px;
    margin-bottom: 15px;
    border-bottom: 1px solid #eaeaea;
}

.email-subject,
.email-sender,
.email-recipient {
    font-size: 14px;
    line-height: 1.5;
    color: #444;
}

.email-subject {
    font-weight: bold;
    margin-bottom: 5px;
}

.email-body {
    font-size: 16px;
    line-height: 1.5;
    color: #444;
}

/* Advertisement */
.advertisement {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    border: 1px solid #eaeaea;
    background-color: #f8f8f8;
    font-family: Arial, sans-serif;
}

.advertisement-title {
    font-size: 18px;
    font-weight: bold;
    color: #444;
    margin-bottom: 10px;
}

.advertisement-content {
    font-size: 16px;
    line-height: 1.5;
    color: #444;
    margin-bottom: 10px;
}

.advertisement-image {
    text-align: center;
    margin-bottom: 10px;
}

.advertisement-image .advertisement-img {
    max-width: 100%;
    height: auto;
}

.advertisement-cta {
    font-size: 14px;
    font-weight: bold;
    color: #007bff;
    text-align: center;
}

/* YouTube Idea */
.youtube-video-card {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    border: 1px solid #eaeaea;
}

.youtube-video-thumbnail {
    width: 100%;
    max-height: 250px;
    overflow: hidden;
    margin-bottom: 15px;
}

.youtube-video-thumbnail img {
    width: 100%;
    height: auto;
    object-fit: cover;
}

.youtube-video-details {
    font-size: 16px;
    line-height: 1.5;
}

.youtube-video-title {
    font-weight: bold;
    margin-bottom: 5px;
}

.youtube-video-info {
    color: #777;
    font-size: 14px;
}

.youtube-channel-name {
    font-weight: bold;
}

.youtube-view-count {
    font-weight: normal;
}

/* Twitter Post */
.twitter-post {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    border: 1px solid #eaeaea;
}

.twitter-post-header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.twitter-profile-picture {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 10px;
}

.twitter-author-info {
    font-size: 14px;
}

.twitter-author-name {
    font-weight: bold;
}

.twitter-username {
    color: #777;
    font-size: 12px;
}

.twitter-post-content {
    font-size: 16px;
    line-height: 1.5;
    margin-bottom: 15px;
}

.twitter-post-image {
    width: 100%;
    max-height: 400px;
    overflow: hidden;
}

.twitter-image {
    width: 100%;
    height: auto;
    object-fit: cover;
}

/* Facebook Post */
.facebook-post {
    border: 1px solid #e0e0e0;
    padding: 15px;
    background-color: #ffffff;
    max-width: 500px;
    margin: auto;
}

.facebook-post-header {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.profile-picture {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
}

.username {
    font-weight: bold;
}

.facebook-post-body {
    margin-top: 10px;
    margin-bottom: 15px;
}

.facebook-post-footer {
    display: flex;
    justify-content: space-around;
    color: #606770;
    font-size: 14px;
}

.facebook-post-footer i {
    margin-right: 5px;
}

/* Article Post */
.article-post {
    padding: 15px;
    max-width: 700px;
    margin: auto;
}

.article-title {
    font-size: 32px;
    font-weight: bold;
    margin-bottom: 10px;
}

.article-meta {
    font-size: 14px;
    color: #777;
    margin-bottom: 20px;
}

.author-name, .publication-date {
    margin-right: 10px;
}

.article-image {
    width: 100%;
    max-height: 400px;
    object-fit: cover;
    margin-bottom: 20px;
}

.article-content {
    font-size: 16px;
    line-height: 1.5;
    text-align: justify;
}

/* Instagram Post */
.instagram-post {
    width: 100%;
    max-width: 600px; /* Adjust based on desired post width */
    padding: 20px;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
    border: 1px solid #eaeaea; /* Instagram-style border */
}

.instagram-post-header {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.instagram-profile-picture {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
}

.instagram-username {
    font-weight: bold;
    color: #262626;
}

.instagram-post-image {
    width: 100%;
    margin-bottom: 10px;
}

.instagram-post-image img {
    width: 100%;
    height: auto;
}

.instagram-post-caption {
    font-size: 16px;
    line-height: 1.5;
    color: #262626;
}

/* Blog Post */
.blog-post {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
}

.blog-post-header {
    margin-bottom: 20px;
}

.blog-post-title {
    font-size: 28px;
    margin-bottom: 5px;
}

.blog-post-author {
    font-size: 14px;
    color: #777;
}

.blog-post-date {
    margin-left: 10px;
}

.blog-post-cover {
    margin-bottom: 20px;
}

.blog-cover-image {
    width: 100%;
    height: auto;
    object-fit: cover;
}

.blog-post-content {
    font-size: 16px;
    line-height: 1.5;
}

/* LinkedIN Post */
.linkedin-post {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    border: 1px solid #eaeaea;
}

.linkedin-post-header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.linkedin-profile-picture {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 10px;
}

.linkedin-author-info {
    font-size: 14px;
}

.linkedin-author-name {
    font-weight: bold;
}

.linkedin-author-title {
    color: #777;
    font-size: 12px;
}

.linkedin-post-content {
    font-size: 16px;
    line-height: 1.5;
    margin-bottom: 15px;
}

.linkedin-post-image {
    width: 100%;
    max-height: 400px;
    overflow: hidden;
}

.linkedin-image {
    width: 100%;
    height: auto;
    object-fit: cover;
}

/* Tiktok Post */
.tiktok-post {
    width: 300px;
    border: 1px solid #ddd;
    border-radius: 10px;
    overflow: hidden;
}

.tiktok-video {
    position: relative;
    padding-top: 75%; /* 3:4 aspect ratio */
}

.tiktok-thumbnail {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.tiktok-info {
    padding: 10px;
}

.tiktok-username {
    font-weight: bold;
    margin-bottom: 5px;
}

.tiktok-description {
    font-size: 14px;
    margin-bottom: 10px;
}

.tiktok-icons {
    display: flex;
    justify-content: space-between;
    font-size: 20px;
}

.tiktok-icons i {
    margin-right: 5px;
}

/* Reddit Post */
.reddit-post {
    width: 500px;
    border: 1px solid #e6e6e6;
    border-radius: 8px;
    padding: 15px;
    background-color: #ffffff;
    font-family: Arial, sans-serif;
}

.reddit-post-header {
    display: flex;
    align-items: center;
    padding-bottom: 10px;
    border-bottom: 1px solid #e6e6e6;
    margin-bottom: 10px;
}

.reddit-post-header .subreddit {
    color: #0079D3;
    font-size: 14px;
    font-weight: bold;
    margin-right: 8px;
}

.reddit-post-header .username {
    color: #8a8a8a;
    font-size: 14px;
}

.reddit-post-body {
    font-size: 14px;
    color: #262626;
}

.reddit-post-footer {
    display: flex;
    align-items: center;
    padding-top: 10px;
    border-top: 1px solid #e6e6e6;
    margin-top: 10px;
}

.reddit-post-footer .icon {
    width: 20px;
    height: 20px;
    margin-right: 5px;
}

/* Visualization Modal */
.modal-xl {
    max-width: 800px;
}

.modal-content {
    background-color: #f0f0f0;
    border-radius: 8px;
}

.modal-header {
    border-bottom: none;
}

.modal-footer {
    border-top: none;
}

/* Add a button to view content in example format */
.view-content-btn {
    margin-top: 15px;
}"

/app/static/js/main.js: "/* Helper function to render the content visualization based on content type and text
function renderContentVisualization(contentType, contentText) {
    let visualization = '';
    switch (contentType) {
        case 'instagram_captions':
            visualization = `<div class="instagram-post">
                                <div class="instagram-caption">${contentText}</div>
                             </div>`;
            break;
        case 'facebook_posts':
            visualization = `<div class="facebook-post">
                                <div class="facebook-content">${contentText}</div>
                             </div>`;
            break;
        case 'reddit_posts':
            visualization = `<div class="reddit-post">
                                <div class="reddit-content">${contentText}</div>
                             </div>`;
            break;
        case 'articles':
            visualization = `<div class="article">
                                <div class="article-content">${contentText}</div>
                             </div>`;
            break;
        // Additional cases for other content types (e.g., 'tiktok_ideas')
        default:
            visualization = `<div class="unknown-content-type">Unknown content type</div>`;
    }
    return visualization;
}

// Event listener for "View" button click
document.querySelectorAll('.view-content-btn').forEach(function (button) {
    button.addEventListener('click', function () {
        // Get content type and text from the card
        const card = button.closest('.content-card');
        const contentType = card.getAttribute('data-content-type');
        const contentText = card.querySelector('.card-text').textContent;

        // Render the content visualization based on content type and text
        const visualization = renderContentVisualization(contentType, contentText);

        // Update the modal content and show the modal
        const modalBody = document.querySelector('#contentVisualizationModal .modal-body');
        modalBody.innerHTML = visualization;
        $('#contentVisualizationModal').modal('show');
    });
}); */

// Variables to track generated content and the current version index
let generatedVersions = [];
let currentIndex = 0;

// New function to populate settings and load template
function populateSettingsAndLoadTemplate(contentType) {
  // Get settings for the selected content type from content_generation_options
  let contentTypeSettings = content_generation_options[contentType];

  // Find the container for the dropdowns in the selected card
  let dropdownContainer = document.querySelector('.content-cards .card [data-type="' + contentType + '"]').parentNode;

  // Clear existing dropdowns
  dropdownContainer.innerHTML = '';

  // Loop through each setting and create dropdowns
  for (let setting in contentTypeSettings) {
    // Create a dropdown container
    let dropdownDiv = document.createElement('div');
    dropdownDiv.className = 'dropdown mb-2';

    // Create a button for the dropdown
    let dropdownButton = document.createElement('button');
    dropdownButton.className = 'btn btn-secondary dropdown-toggle';
    dropdownButton.type = 'button';
    dropdownButton.id = contentType + '-' + setting + '-dropdown';
    dropdownButton.dataset.toggle = 'dropdown';
    dropdownButton.textContent = setting.charAt(0).toUpperCase() + setting.slice(1);

    // Create a dropdown menu container
    let dropdownMenu = document.createElement('div');
    dropdownMenu.className = 'dropdown-menu';
    dropdownMenu.setAttribute('aria-labelledby', dropdownButton.id);

    // Populate the dropdown menu with options
    contentTypeSettings[setting].forEach(option => {
      let dropdownItem = document.createElement('a');
      dropdownItem.className = 'dropdown-item';
      dropdownItem.href = '#';
      dropdownItem.textContent = option;
      dropdownMenu.appendChild(dropdownItem);
    });

    // Append the dropdown button and menu to the dropdown container
    dropdownDiv.appendChild(dropdownButton);
    dropdownDiv.appendChild(dropdownMenu);

    // Append the dropdown container to the parent container
    dropdownContainer.appendChild(dropdownDiv);
  }

  // Load the corresponding template for the content type
  // Hide all cards
  let allCards = document.querySelectorAll('.content-cards .card');
  allCards.forEach(card => {
    card.style.display = 'none';
  });

  // Show only the selected card
  let selectedCard = document.querySelector('.content-cards .card [data-type="' + contentType + '"]').closest('.card');
  selectedCard.style.display = 'block';
}

// Define a function to populate the modal based on content type
function populateModalWithGeneratedContent(contentType, response) {
  let modalBody = document.querySelector('.modal-body .generated-content');
  modalBody.innerHTML = ''; // Clear the existing content

  // Define a variable to hold the template
  let template;

  // Use a switch statement to handle each content type
  switch (contentType) {
    case 'instagram_captions':
      template = modalBody.querySelector('.instagram-post-template').cloneNode(true);
      template.querySelector('.instagram-post-caption').textContent = response.generatedContent;
      break;
    case 'tiktok_ideas':
      template = modalBody.querySelector('.tiktok-post-template').cloneNode(true);
      template.querySelector('.tiktok-description').textContent = response.generatedContent;
      break;
    case 'facebook_posts':
      template = modalBody.querySelector('.facebook-post-template').cloneNode(true);
      template.querySelector('.facebook-post-body').textContent = response.generatedContent;
      break;
    // Add more cases for other content types (LinkedIn, Twitter, YouTube, etc.)
    default:
      console.error('Unhandled content type:', contentType);
      return;
  }

  // Display the chosen template and add it to the modal body
  template.style.display = 'block';
  modalBody.appendChild(template);
}

// Update the event listener for the "Generate" buttons
document.querySelectorAll('.generate-btn').forEach(btn => {
  btn.addEventListener('click', function() {
    // Get the content type from the data-type attribute
    let contentType = this.getAttribute('data-type');

    // Get additional settings for content generation from the UI
    let tone = document.querySelector('#tone-setting').value;
    let amountOfEmojis = document.querySelector('#emoji-setting').value;
    let writingStyle = document.querySelector('#style-setting').value;

    // Make AJAX request and handle response
    let xhr = new XMLHttpRequest();
    // (same as before) ...
    xhr.onreadystatechange = function() {
      if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
        // Handle successful response
        let response = JSON.parse(xhr.responseText);

        // Call the function to populate the modal
        populateModalWithGeneratedContent(contentType, response);

        // Show the modal
        $('#generatedContentModal').modal('show');
      } else if (xhr.readyState === XMLHttpRequest.DONE) {
        // Handle failed response
        // Display error message (Update the selector as needed)
        document.querySelector('.error-container').innerHTML = 'An error occurred. Please try again.';
      }
    };
    xhr.send(JSON.stringify({
      contentType: contentType,
      settings: settings
    }));
  });
});

// Function to update modal content
function updateModalContent(content) {
  // Clone the template for the relevant content type
  let templateClass = content.type + '-template';
  let clonedElement = document.querySelector('.' + templateClass).cloneNode(true);

  // Remove the '-template' suffix and style attribute from the cloned element
  clonedElement.classList.remove(templateClass);
  clonedElement.style.display = '';

  // Populate the cloned element with content data
  switch (content.type) {
    case 'tiktok_ideas':
      // Populate TikTok Ideas content
      clonedElement.querySelector('.tiktok-text').innerText = content.text;
      break;
    case 'instagram_captions':
      // Populate Instagram Captions content
      clonedElement.querySelector('.instagram-username').innerText = content.username;
      clonedElement.querySelector('.instagram-caption').innerText = content.text;
      break;
    // Add similar cases for other content types (e.g., 'facebook_posts', 'twitter_tweets', etc.)
    default:
      // Handle unexpected content type
      console.error('Unexpected content type:', content.type);
      return;
  }

  // Clear the current content in the modal
  let generatedContentContainer = document.querySelector('.generated-content');
  generatedContentContainer.innerHTML = '';

  // Append the cloned and populated element to the modal
  generatedContentContainer.appendChild(clonedElement);

  // Add the new content to the generatedVersions array
  generatedVersions.push(content);
  // Update the currentIndex to point to the latest version
  currentIndex = generatedVersions.length - 1;

  // Update the state of the navigation buttons (e.g., disable Previous button if no previous version)
  updateNavigationButtons();
}

// Function to update the state of the navigation buttons in the modal
function updateNavigationButtons() {
  let prevButton = document.querySelector('.previous-version-button');
  let nextButton = document.querySelector('.next-version-button');

  // Disable Previous button if there is no previous version
  prevButton.disabled = currentIndex <= 0;
  // Disable Next button if there is no next version
  nextButton.disabled = currentIndex >= generatedVersions.length - 1;
}

// Event listener for the Next button
document.querySelector('.next-version-btn').addEventListener('click', function() {
  // Increment currentIndex and update the modal with the content of the next version
  if (currentIndex < generatedVersions.length - 1) {
    currentIndex++;
    // Call the updateModalContent function with the next version from the generatedVersions array
    updateModalContent(generatedVersions[currentIndex]);
  }
});

// Event listener for the Previous button
document.querySelector('.previous-version-btn').addEventListener('click', function() {
  // Decrement currentIndex and update the modal with the content of the previous version
  if (currentIndex > 0) {
    currentIndex--;
    // Call the updateModalContent function with the previous version from the generatedVersions array
    updateModalContent(generatedVersions[currentIndex]);
  }
});

// Event listener for the Regenerate button
document.querySelector('.regenerate-content-btn').addEventListener('click', function() {
  // Make an AJAX request to the server to regenerate content
  // Use the same content type as the current content for regeneration
  let currentContent = generatedVersions[currentIndex];
  let contentType = currentContent.type;

  // Make AJAX request
  let xhr = new XMLHttpRequest();
  xhr.open('POST', '/regenerate-content'); // Update the URL to your backend API endpoint
  xhr.setRequestHeader('Content-Type', 'application/json');
  xhr.onreadystatechange = function() {
    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
      // Handle successful response
      let response = JSON.parse(xhr.responseText);
      // Call the updateModalContent function with the response data
      updateModalContent(response);
    } else if (xhr.readyState === XMLHttpRequest.DONE) {
      // Handle failed response
      console.error('An error occurred. Please try again.');
    }
  };
  xhr.send(JSON.stringify({ contentType: contentType }));
});

// Event listener for the Save button
document.querySelector('.save-content-btn').addEventListener('click', function() {
  // Save the selected content to the user's content library
  // This may involve making an AJAX request to the server to save the content
  let currentContent = generatedVersions[currentIndex];

  // Make AJAX request
  let xhr = new XMLHttpRequest();
  xhr.open('POST', '/save-content'); // Update the URL to your backend API endpoint
  xhr.setRequestHeader('Content-Type', 'application/json');
  xhr.onreadystatechange = function() {
    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
      // Handle successful response
      // Show a confirmation message to the user after successful save
      console.log('Content successfully saved to your library.');
    } else if (xhr.readyState === XMLHttpRequest.DONE) {
      // Handle failed response
      console.error('An error occurred. Please try again.');
    }
  };
  xhr.send(JSON.stringify(currentContent));
});

// Note: For dynamic content types, the updateModalContent function may be extended
// to support updating the modal based on the content type (e.g., Instagram post, LinkedIn post, etc.)
// Also, you may need to update the populate process in updateModalContent to handle different content structures."

/app/templates/base.html: "<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ContentGenie</title>
    <!-- Include Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/main.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
</head>
<body>
    <!-- Responsive Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="{{ url_for('main.home') }}">ContentGenie</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('main.dashboard') }}">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('main.account') }}">Account</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('main.help') }}">Help</a>
                </li>
                {% if current_user.is_authenticated %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('auth.logout') }}">Logout</a>
                    </li>
                {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('auth.login') }}">Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('auth.register') }}">Register</a>
                    </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mt-4">
        {% block content %}
        {% endblock %}
    </div>

    <!-- Include Bootstrap and jQuery JavaScript -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <!-- Custom JavaScript -->
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>"

/app/templates/dashboard.html: "{% extends 'base.html' %}

{% block content %}
<div class="dashboard">
    <!-- Dashboard content with tabs -->
    <ul class="nav nav-tabs" id="dashboardTabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Home</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="generate-content-tab" data-toggle="tab" href="#generate-content" role="tab" aria-controls="generate-content" aria-selected="false">Generate Content</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="my-content-tab" data-toggle="tab" href="#my-content" role="tab" aria-controls="my-content" aria-selected="false">My Content</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="learn-tab" data-toggle="tab" href="#learn" role="tab" aria-controls="learn" aria-selected="false">Learn</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="settings-tab" data-toggle="tab" href="#settings" role="tab" aria-controls="settings" aria-selected="false">Settings</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="account-tab" data-toggle="tab" href="#account" role="tab" aria-controls="account" aria-selected="false">Account</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="help-tab" data-toggle="tab" href="#help" role="tab" aria-controls="help" aria-selected="false">Help</a>
        </li>
    </ul>
    <div class="tab-content" id="dashboardTabsContent">
    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
        <!-- Home tab content -->
        <div class="jumbotron text-center">
            <h1>Welcome to ContentGenie!</h1>
            <p>Generate creative content for your social media platforms and digital marketing campaigns.</p>
            <a href="#generate-content" class="btn btn-primary" data-toggle="tab" role="tab">Get Started</a>
        </div>
    </div>
    <div class="tab-pane fade" id="generate-content" role="tabpanel" aria-labelledby="generate-content-tab">
        <!-- Generate Content tab content -->
        <div class="content-generation">
            <h2>Generate Content</h2>
            <div class="content-cards row">
                <!-- TikTok Ideas Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">TikTok Ideas</h5>
                            <p class="card-text">Get fresh and creative ideas for your next TikTok video.</p>
                            <!-- Settings Dropdowns for TikTok Ideas -->
                            {% for setting, options in content_generation_options.tiktok_ideas.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="tiktok_ideas-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="tiktok_ideas-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="tiktok_ideas">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Instagram Captions Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Instagram Captions</h5>
                            <p class="card-text">Generate creative captions for your Instagram posts.</p>
                            <!-- Settings Dropdowns for Instagram Captions -->
                            {% for setting, options in content_generation_options.instagram_captions.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="instagram_captions-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="instagram_captions-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="instagram_captions">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Facebook Posts Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Facebook Posts</h5>
                            <p class="card-text">Craft engaging content for your Facebook audience.</p>
                            {% for setting, options in content_generation_options.facebook_posts.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="facebook_posts-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="facebook_posts-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="facebook_posts">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Reddit Posts Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Reddit Posts</h5>
                            <p class="card-text">Create compelling Reddit posts that resonate with the community.</p>
                            {% for setting, options in content_generation_options.reddit_posts.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="reddit_posts-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="reddit_posts-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="reddit_posts">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Web Articles Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Web Articles</h5>
                            <p class="card-text">Compose compelling articles on any topic.</p>
                            {% for setting, options in content_generation_options.articles.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="articles-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="articles-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="web_articles">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Blog Posts Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Blog Posts</h5>
                            <p class="card-text">Write engaging blog posts that capture readers' attention.</p>
                            {% for setting, options in content_generation_options.blog_posts.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="blog_posts-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="blog_posts-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="blog_posts">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- LinkedIn Posts Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">LinkedIn Posts</h5>
                            <p class="card-text">Create professional content for your LinkedIn network.</p>
                            {% for setting, options in content_generation_options.linkedin_posts.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="linkedin_posts-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="linkedin_posts-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="linkedin_posts">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Twitter Tweets Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Twitter Tweets</h5>
                            <p class="card-text">Craft impactful tweets for your Twitter audience.</p>
                            {% for setting, options in content_generation_options.twitter_posts.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="twitter_posts-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="twitter_posts-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="twitter_tweets">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- YouTube Video Ideas Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">YouTube Video Ideas</h5>
                            <p class="card-text">Discover creative ideas for your next YouTube video.</p>
                            {% for setting, options in content_generation_options.youtube_video_ideas.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="youtube_video_ideas-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="youtube_video_ideas-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="youtube_video_ideas">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Email Campaigns Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Email Campaigns</h5>
                            <p class="card-text">Compose engaging emails for your marketing campaigns.</p>
                            {% for setting, options in content_generation_options.email_campaigns.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="email_campaigns-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="email_campaigns-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="email_campaigns">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Advertisements Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Advertisements</h5>
                            <p class="card-text">Create persuasive advertisements for your brand.</p>
                            {% for setting, options in content_generation_options.advertisements.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="advertisements-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="advertisements-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="advertisements">Generate</button>
                        </div>
                    </div>
                </div>
                <!-- Product Descriptions Card -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Product Descriptions</h5>
                            <p class="card-text">Write enticing descriptions for your products.</p>
                            {% for setting, options in content_generation_options.product_descriptions.items() %}
                            <div class="dropdown mb-2">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="product_descriptions-{{ setting }}-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    {{ setting.capitalize() }}
                                </button>
                                <div class="dropdown-menu" aria-labelledby="product_descriptions-{{ setting }}-dropdown">
                                    {% for option in options %}
                                    <a class="dropdown-item" href="#">{{ option }}</a>
                                    {% endfor %}
                                </div>
                            </div>
                            {% endfor %}
                            <button type="button" class="btn btn-primary generate-btn" data-type="product_descriptions">Generate</button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Modal for displaying generated content -->
            <div class="modal fade" id="generatedContentModal" tabindex="-1" role="dialog" aria-labelledby="generatedContentModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl" role="document"> <!-- Adjust modal size if needed -->
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="generatedContentModalLabel">Generated Content</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <!-- Placeholder for displaying the generated content -->
                            <div class="generated-content">
                                <div class="instagram-post instagram-post-template" style="display: none;">
                                    <!-- Post header with user profile picture and username -->
                                    <div class="instagram-post-header">
                                        <img class="instagram-profile-picture" src="{{ profile_picture_url }}" alt="Profile Picture">
                                        <span class="instagram-username">{{ username }}</span>
                                    </div>
                                    <!-- Post image (placeholder image URL) -->
                                    <div class="instagram-post-image">
                                        <img src="{{ post_image_url }}" alt="Post Image">
                                    </div>
                                    <!-- Post caption (user-generated content) -->
                                    <div class="instagram-post-caption">{{ selected_content.text }}</div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="product-description product-description-template" style="display: none;">
                                    <!-- Product image (placeholder image URL) -->
                                    <div class="product-image">
                                        <img src="{{ product_image_url }}" alt="Product Image">
                                    </div>
                                    <!-- Product title -->
                                    <div class="product-title">{{ product_title }}</div>
                                    <!-- Product description (user-generated content) -->
                                    <div class="product-text">{{ selected_content.text }}</div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="email-campaign email-campaign-template" style="display: none;">
                                    <!-- Email header (subject, sender, recipient) -->
                                    <div class="email-header">
                                        <div class="email-subject">Subject: {{ email_subject }}</div>
                                        <div class="email-sender">From: {{ email_sender }}</div>
                                        <div class="email-recipient">To: {{ email_recipient }}</div>
                                    </div>
                                    <!-- Email body (user-generated content) -->
                                    <div class="email-body">
                                        {{ selected_content.text }}
                                    </div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="youtube-video-card youtube-video-card-template" style="display: none;">
                                    <!-- Video thumbnail (dummy image used for demonstration) -->
                                    <div class="youtube-video-thumbnail">
                                        <img src="/path/to/video-thumbnail.jpg" alt="Video Thumbnail">
                                    </div>
                                    <!-- Video details -->
                                    <div class="youtube-video-details">
                                        <!-- Rendered content from user-generated text (video title) -->
                                        <div class="youtube-video-title">
                                            {{ selected_content.text }}
                                        </div>
                                        <!-- Channel name and view count -->
                                        <div class="youtube-video-info">
                                            <span class="youtube-channel-name">Channel Name</span> • <span class="youtube-view-count">1M views</span>
                                        </div>
                                    </div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="twitter-post twitter-post-template" style="display: none;">
                                    <div class="twitter-post-header">
                                        <!-- Author's profile picture -->
                                        <img class="twitter-profile-picture" src="/path/to/profile-picture.jpg" alt="Profile Picture">
                                        <!-- Author's name and username -->
                                        <div class="twitter-author-info">
                                            <span class="twitter-author-name">Author Name</span>
                                            <span class="twitter-username">@ExampleUser</span>
                                        </div>
                                    </div>
                                    <!-- Rendered content from user-generated text -->
                                    <div class="twitter-post-content twitter-post-content-template">
                                        {{ selected_content.text }}
                                    </div>
                                    <!-- Optional post image -->
                                    <div class="twitter-post-image twitter-post-image-template">
                                        <img class="twitter-image" src="/path/to/post-image.jpg" alt="Post Image">
                                    </div>
                                </div>
                                <!-- Rendered visualization for Advertisements -->
                                <div class="advertisement advertisement-template" style="display: none;">
                                    <!-- Advertisement title -->
                                    <div class="advertisement-title advertisement-title-template">
                                        {{ selected_content.title }}
                                    </div>
                                    <!-- Rendered content from user-generated text -->
                                    <div class="advertisement-content advertisement-content-template">
                                        {{ selected_content.text }}
                                    </div>
                                    <!-- Optional advertisement image -->
                                    <div class="advertisement-image advertisement-image-template">
                                        <img class="advertisement-img" src="/path/to/advertisement-image.jpg" alt="Advertisement Image">
                                    </div>
                                    <!-- Advertisement call-to-action -->
                                    <div class="advertisement-cta advertisement-cta-template">
                                        {{ selected_content.cta }}
                                    </div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="linkedin-post linkedin-post-template" style="display: none;">
                                    <div class="linkedin-post-header">
                                        <!-- Author's profile picture -->
                                        <img class="linkedin-profile-picture" src="/path/to/profile-picture.jpg" alt="Profile Picture">
                                        <!-- Author's name and title -->
                                        <div class="linkedin-author-info">
                                            <span class="linkedin-author-name">Author Name</span>
                                            <span class="linkedin-author-title">Author Title</span>
                                        </div>
                                    </div>
                                    <!-- Rendered content from user-generated text -->
                                    <div class="linkedin-post-content">
                                        {{ selected_content.text }}
                                    </div>
                                    <!-- Optional post image -->
                                    <div class="linkedin-post-image">
                                        <img class="linkedin-image" src="/path/to/post-image.jpg" alt="Post Image">
                                    </div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="blog-post blog-post-template" style="display: none;">
                                    <div class="blog-post-header">
                                        <!-- Blog post title -->
                                        <h2 class="blog-post-title">Blog Post Title</h2>
                                        <!-- Author information -->
                                        <div class="blog-post-author">
                                            <span class="blog-author-name">By Author Name</span>
                                            <span class="blog-post-date">Date</span>
                                        </div>
                                    </div>
                                    <!-- Optional cover image -->
                                    <div class="blog-post-cover">
                                        <img class="blog-cover-image" src="/path/to/cover-image.jpg" alt="Cover Image">
                                    </div>
                                    <!-- Rendered content from user-generated text -->
                                    <div class="blog-post-content">
                                        {{ selected_content.text }}
                                    </div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="tiktok-post tiktok-post-template" style="display: none;">
                                    <div class="tiktok-video">
                                        <!-- Thumbnail or video -->
                                        <img class="tiktok-thumbnail" src="/path/to/thumbnail.jpg" alt="TikTok Thumbnail">
                                    </div>
                                    <div class="tiktok-info">
                                        <span class="tiktok-username">@ExampleUser</span>
                                        <!-- Rendered content from user-generated text -->
                                        <div class="tiktok-description">
                                            {{ selected_content.text }}
                                        </div>
                                        <!-- TikTok icons -->
                                        <div class="tiktok-icons">
                                            <i class="fas fa-heart"></i>
                                            <i class="fas fa-comment"></i>
                                            <i class="fas fa-share"></i>
                                        </div>
                                    </div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="article-post article-post-template" style="display: none;">
                                    <h2 class="article-title">Article Title</h2>
                                    <div class="article-meta">
                                        <span class="author-name">By Example Author</span>
                                        <span class="publication-date">Published on March 31, 2023</span>
                                    </div>
                                    <img class="article-image" src="/path/to/article_image.jpg" alt="Article Image">
                                    <!-- Rendered content from user-generated text -->
                                    <div class="article-content">
                                        {{ selected_content.text }}
                                    </div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="facebook-post facebook-post-template" style="display: none;">
                                    <div class="facebook-post-header">
                                        <img class="profile-picture" src="/path/to/profile_picture.jpg" alt="Profile Picture">
                                        <span class="username">Example User</span>
                                    </div>
                                    <div class="facebook-post-body">
                                        <!-- Rendered content from user-generated text -->
                                        {{ selected_content.text }}
                                    </div>
                                    <div class="facebook-post-footer">
                                        <!-- Font Awesome icons for Like, Comment, and Share -->
                                        <i class="fas fa-thumbs-up"></i> Like
                                        <i class="fas fa-comment"></i> Comment
                                        <i class="fas fa-share"></i> Share
                                    </div>
                                </div>
                                <!-- Rendered visualization based on content type -->
                                <div class="reddit-post reddit-post-template" style="display: none;">
                                    <div class="reddit-post-header">
                                        <span class="subreddit">r/ExampleSubreddit</span>
                                        <span class="username">Posted by u/ExampleUser</span>
                                    </div>
                                    <div class="reddit-post-body">
                                        <!-- Rendered content from user-generated text -->
                                        {{ selected_content.text }}
                                    </div>
                                    <div class="reddit-post-footer">
                                        <!-- Font Awesome icons for upvote, downvote, and comment -->
                                        <i class="fas fa-arrow-up"></i>
                                        <i class="fas fa-arrow-down"></i>
                                        <i class="fas fa-comment"></i>
                                    </div>
                                </div>
                            </div>
                            </div>
                            <!-- Buttons for regenerating content and navigating between versions -->
                            <div class="content-navigation">
                                <button type="button" class="btn btn-secondary previous-version-btn">Previous</button>
                                <button type="button" class="btn btn-primary regenerate-content-btn">Regenerate</button>
                                <button type="button" class="btn btn-secondary next-version-btn">Next</button>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary save-content-btn">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="my-content" role="tabpanel" aria-labelledby="my-content-tab">
        <!-- My Content tab content -->
        <div class="my-content">
            <h2>My Content</h2>
            <p>View and manage your previously generated content.</p>
            <!-- Display a grid layout of user-generated content -->
            <div class="row">
                {% for content in user_content %}
                    <div class="col-md-4">
                        <div class="card content-card" data-content-type="{{ content.content_type }}">
                            <div class="card-body">
                                <h5 class="card-title">{{ content.content_type | title }}</h5>
                                <p class="card-text">{{ content.text | truncate(100) }}</p>
                                <!-- Add a button to view content in example format -->
                                <button type="button" class="btn btn-primary view-content-btn">View</button>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
        <!-- Visualization modal for displaying generated content in example format -->
        <div class="modal fade" id="contentVisualizationModal" tabindex="-1" aria-labelledby="contentVisualizationModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="contentVisualizationModalLabel">Content Visualization</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <!-- Rendered visualization based on content type -->
                        <div class="instagram-post">
                            <!-- Post header with user profile picture and username -->
                            <div class="instagram-post-header">
                                <img class="instagram-profile-picture" src="{{ profile_picture_url }}" alt="Profile Picture">
                                <span class="instagram-username">{{ username }}</span>
                            </div>
                            <!-- Post image (placeholder image URL) -->
                            <div class="instagram-post-image">
                                <img src="{{ post_image_url }}" alt="Post Image">
                            </div>
                            <!-- Post caption (user-generated content) -->
                            <div class="instagram-post-caption">{{ selected_content.text }}</div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="product-description">
                            <!-- Product image (placeholder image URL) -->
                            <div class="product-image">
                                <img src="{{ product_image_url }}" alt="Product Image">
                            </div>
                            <!-- Product title -->
                            <div class="product-title">{{ product_title }}</div>
                            <!-- Product description (user-generated content) -->
                            <div class="product-text">{{ selected_content.text }}</div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="email-campaign">
                            <!-- Email header (subject, sender, recipient) -->
                            <div class="email-header">
                                <div class="email-subject">Subject: {{ email_subject }}</div>
                                <div class="email-sender">From: {{ email_sender }}</div>
                                <div class="email-recipient">To: {{ email_recipient }}</div>
                            </div>
                            <!-- Email body (user-generated content) -->
                            <div class="email-body">
                                {{ selected_content.text }}
                            </div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="youtube-video-card">
                            <!-- Video thumbnail (dummy image used for demonstration) -->
                            <div class="youtube-video-thumbnail">
                                <img src="/path/to/video-thumbnail.jpg" alt="Video Thumbnail">
                            </div>
                            <!-- Video details -->
                            <div class="youtube-video-details">
                                <!-- Rendered content from user-generated text (video title) -->
                                <div class="youtube-video-title">
                                    {{ selected_content.text }}
                                </div>
                                <!-- Channel name and view count -->
                                <div class="youtube-video-info">
                                    <span class="youtube-channel-name">Channel Name</span> • <span class="youtube-view-count">1M views</span>
                                </div>
                            </div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="twitter-post">
                            <div class="twitter-post-header">
                                <!-- Author's profile picture -->
                                <img class="twitter-profile-picture" src="/path/to/profile-picture.jpg" alt="Profile Picture">
                                <!-- Author's name and username -->
                                <div class="twitter-author-info">
                                    <span class="twitter-author-name">Author Name</span>
                                    <span class="twitter-username">@ExampleUser</span>
                                </div>
                            </div>
                            <!-- Rendered content from user-generated text -->
                            <div class="twitter-post-content">
                                {{ selected_content.text }}
                            </div>
                            <!-- Optional post image -->
                            <div class="twitter-post-image">
                                <img class="twitter-image" src="/path/to/post-image.jpg" alt="Post Image">
                            </div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="linkedin-post">
                            <div class="linkedin-post-header">
                                <!-- Author's profile picture -->
                                <img class="linkedin-profile-picture" src="/path/to/profile-picture.jpg" alt="Profile Picture">
                                <!-- Author's name and title -->
                                <div class="linkedin-author-info">
                                    <span class="linkedin-author-name">Author Name</span>
                                    <span class="linkedin-author-title">Author Title</span>
                                </div>
                            </div>
                            <!-- Rendered content from user-generated text -->
                            <div class="linkedin-post-content">
                                {{ selected_content.text }}
                            </div>
                            <!-- Optional post image -->
                            <div class="linkedin-post-image">
                                <img class="linkedin-image" src="/path/to/post-image.jpg" alt="Post Image">
                            </div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="blog-post">
                            <div class="blog-post-header">
                                <!-- Blog post title -->
                                <h2 class="blog-post-title">Blog Post Title</h2>
                                <!-- Author information -->
                                <div class="blog-post-author">
                                    <span class="blog-author-name">By Author Name</span>
                                    <span class="blog-post-date">Date</span>
                                </div>
                            </div>
                            <!-- Optional cover image -->
                            <div class="blog-post-cover">
                                <img class="blog-cover-image" src="/path/to/cover-image.jpg" alt="Cover Image">
                            </div>
                            <!-- Rendered content from user-generated text -->
                            <div class="blog-post-content">
                                {{ selected_content.text }}
                            </div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="tiktok-post">
                            <div class="tiktok-video">
                                <!-- Thumbnail or video -->
                                <img class="tiktok-thumbnail" src="/path/to/thumbnail.jpg" alt="TikTok Thumbnail">
                            </div>
                            <div class="tiktok-info">
                                <span class="tiktok-username">@ExampleUser</span>
                                <!-- Rendered content from user-generated text -->
                                <div class="tiktok-description">
                                    {{ selected_content.text }}
                                </div>
                                <!-- TikTok icons -->
                                <div class="tiktok-icons">
                                    <i class="fas fa-heart"></i>
                                    <i class="fas fa-comment"></i>
                                    <i class="fas fa-share"></i>
                                </div>
                            </div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="article-post">
                            <h2 class="article-title">Article Title</h2>
                            <div class="article-meta">
                                <span class="author-name">By Example Author</span>
                                <span class="publication-date">Published on March 31, 2023</span>
                            </div>
                            <img class="article-image" src="/path/to/article_image.jpg" alt="Article Image">
                            <!-- Rendered content from user-generated text -->
                            <div class="article-content">
                                {{ selected_content.text }}
                            </div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="facebook-post">
                            <div class="facebook-post-header">
                                <img class="profile-picture" src="/path/to/profile_picture.jpg" alt="Profile Picture">
                                <span class="username">Example User</span>
                            </div>
                            <div class="facebook-post-body">
                                <!-- Rendered content from user-generated text -->
                                {{ selected_content.text }}
                            </div>
                            <div class="facebook-post-footer">
                                <!-- Font Awesome icons for Like, Comment, and Share -->
                                <i class="fas fa-thumbs-up"></i> Like
                                <i class="fas fa-comment"></i> Comment
                                <i class="fas fa-share"></i> Share
                            </div>
                        </div>
                        <!-- Rendered visualization based on content type -->
                        <div class="reddit-post">
                            <div class="reddit-post-header">
                                <span class="subreddit">r/ExampleSubreddit</span>
                                <span class="username">Posted by u/ExampleUser</span>
                            </div>
                            <div class="reddit-post-body">
                                <!-- Rendered content from user-generated text -->
                                {{ selected_content.text }}
                            </div>
                            <div class="reddit-post-footer">
                                <!-- Font Awesome icons for upvote, downvote, and comment -->
                                <i class="fas fa-arrow-up"></i>
                                <i class="fas fa-arrow-down"></i>
                                <i class="fas fa-comment"></i>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="learn" role="tabpanel" aria-labelledby="learn-tab">
        <!-- Learn tab content -->
        <div class="learn">
            <h2>Learn</h2>
            <p>Discover tips and best practices for creating engaging content.</p>
            <!-- Display a list of learning resources -->
            <ul class="list-group">
                <li class="list-group-item"><a href="#">How to Write Engaging Captions for Social Media</a></li>
                <li class="list-group-item"><a href="#">Creating Content for Different Platforms</a></li>
                <li class="list-group-item"><a href="#">The Art of Storytelling in Digital Marketing</a></li>
            </ul>
        </div>
    </div>
    <div class="tab-pane fade" id="settings" role="tabpanel" aria-labelledby="settings-tab">
        <!-- Settings tab content -->
        <div class="settings">
            <h2>Settings</h2>
            <form method="POST" action="{{ url_for('main.update_settings') }}">
                {{ user_settings_form.hidden_tag() }}
                <div class="form-check">
                    {{ user_settings_form.pro_subscription(class="form-check-input") }}
                    <label class="form-check-label" for="pro_subscription">Pro Subscription</label>
                </div>
                <button type="submit" class="btn btn-primary">Save Settings</button>
            </form>
        </div>
    </div>
    <div class="tab-pane fade" id="account" role="tabpanel" aria-labelledby="account-tab">
    <!-- Account tab content -->
        <div class="account">
            <h2>Account</h2>
            <p>Manage your account information and preferences.</p>
            <form method="POST" action="{{ url_for('main.update_account') }}">
                {{ account_form.hidden_tag() }}
                <div class="form-group">
                    <label for="username">Username</label>
                    {{ account_form.username(class="form-control") }}
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    {{ account_form.email(class="form-control") }}
                </div>
                <div class="form-group">
                    <label for="password">New Password</label>
                    {{ account_form.password(class="form-control") }}
                </div>
                <div class="form-group">
                    <label for="confirm_password">Confirm New Password</label>
                    {{ account_form.confirm_password(class="form-control") }}
                </div>
                <button type="submit" class="btn btn-primary">Update Account</button>
            </form>
        </div>
    </div>
    <div class="tab-pane fade" id="help" role="tabpanel" aria-labelledby="help-tab">
        <!-- Help tab content -->
        <div class="help">
            <h2>Help</h2>
            <p>Find answers to frequently asked questions and get support.</p>
            <!-- Display a list of help topics -->
            <ul class="list-group">
                <li class="list-group-item"><a href="#">Getting Started with ContentGenie</a></li>
                <li class="list-group-item"><a href="#">Troubleshooting Content Generation Issues</a></li>
                <li class="list-group-item"><a href="#">Managing Your Account and Subscription</a></li>
            </ul>
        </div>
    </div>
</div>
</div>
{% endblock %}
"

/app/templates/home.html: "<Still needs to be made>"

/app/templates/login.html: "<Still needs to be made>"

/app/templates/register.html: "<Still needs to be made>"

/app/__init__.py: "from flask import Flask, Blueprint
from ContentGenie.app.config import Config
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager

db = SQLAlchemy()
migrate = Migrate()
login = LoginManager()
login.login_view = 'auth.login_view'  # Specify the login view in the 'auth' blueprint

bp = Blueprint('main', __name__, static_folder='static')  # Create a blueprint named 'main'


def create_app(config_name=None):
    # Register the blueprint before defining the static folder
    from ContentGenie.app.main import routes as main_routes  # Import routes after creating the blueprint
    from ContentGenie.app.auth import routes as auth_routes  # Import authentication routes

    app = Flask(__name__)
    app.register_blueprint(bp)  # Register the 'main' blueprint without the url_prefix
    app.register_blueprint(auth_routes.bp, url_prefix='/auth')  # Register the 'auth' blueprint with url_prefix

    app.config.from_object(Config)  # Use the Config class from config.py

    db.init_app(app)
    migrate.init_app(app, db)
    login.init_app(app)

    return app"

/app/config.py: "<Still needs to be made>"

/app/forms.py: "<Still needs to be made>"

/app/models.py: "from datetime import datetime
from flask_login import UserMixin
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

db = SQLAlchemy()


class User(UserMixin, db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))
    settings = db.relationship('UserSettings', backref='user', uselist=False)
    contents = db.relationship('Content', backref='author', lazy='dynamic')

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.username}>'


class UserSettings(db.Model):
    __tablename__ = 'user_settings'
    id = db.Column(db.Integer, primary_key=True)
    pro_subscription = db.Column(db.Boolean, default=False)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))

    def __repr__(self):
        return f'<UserSettings for User {self.user_id}>'


class Content(db.Model):
    __tablename__ = 'contents'
    id = db.Column(db.Integer, primary_key=True)
    content_type = db.Column(db.String(64))
    text = db.Column(db.Text)
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))

    def __repr__(self):
        return f'<Content {self.content_type} by User {self.user_id}>'"

/app/routes.py: "from urllib import request

from flask import render_template, Blueprint, redirect, url_for, flash
from flask_login import login_required, current_user, login_user, logout_user
from ContentGenie.app.forms import LoginForm, RegistrationForm
from ContentGenie.app.models import User
from ContentGenie.app import db

bp = Blueprint('main', __name__)


@bp.route('/')
def home():
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard', tab='home'))
    return render_template('home.html')


@bp.route('/dashboard')
@bp.route('/dashboard/<string:tab>')
@login_required
def dashboard(tab='home'):
    # Define content_generation_options as a dictionary with options for each content type
    content_generation_options = {
        'tiktok_ideas': {
            'tone': [
                'Funny', 'Serious', 'Inspirational', 'Sarcastic', 'Motivational',
                'Adventurous', 'Relatable', 'Romantic', 'Quirky', 'Empowering'
            ],
            'audience': [
                'Teens', 'Adults', 'Everyone', 'Families', 'Professionals', 'Parents',
                'Students', 'Travelers', 'Artists', 'Entrepreneurs'
            ],
            'length': [
                'Short (5-10 seconds)', 'Medium (10-30 seconds)', 'Long (30-60 seconds)'
            ],
            'genre': [
                'Comedy', 'Education', 'Lifestyle', 'Dance', 'Travel', 'Beauty & Fashion',
                'Fitness & Health', 'Food & Cooking', 'Life Hacks', 'Challenges'
            ],
            'format': [
                'Solo', 'Duet', 'Group', 'Animation', 'Tutorial', 'Storytelling',
                'Reaction', 'Compilation', 'Vlog', 'Q&A'
            ],
            'music': [
                'With Music', 'Without Music', 'Original Sound', 'Popular Sound'
            ],
            'camera_effect': [
                'None', 'Slow Motion', 'Time Lapse', 'Filters & Effects', 'Green Screen'
            ],
            'caption_style': [
                'None', 'Minimal', 'Descriptive', 'Question', 'Call to Action', 'Hashtags'
            ],
            'engagement': [
                'For Likes', 'For Shares', 'For Comments', 'For Followers', 'For Fun'
            ]
        },

        'instagram_captions': {
            'tone': [
                'Witty', 'Emotional', 'Motivational', 'Inspirational', 'Sarcastic',
                'Adventurous', 'Relatable', 'Romantic', 'Humorous', 'Empowering'
            ],
            'post_type': [
                'Selfie', 'Lifestyle', 'Travel', 'Food', 'Fashion & Beauty', 'Fitness',
                'Nature', 'Art & Creativity', 'Family & Friends', 'Event'
            ],
            'audience': [
                'General Audience', 'Teens', 'Adults', 'Professionals', 'Parents',
                'Students', 'Travelers', 'Artists', 'Entrepreneurs', 'Influencers'
            ],
            'hashtags': {
                'include': ['Yes', 'No'],
                'style': ['Popular', 'Niche', 'Branded', 'Custom'],
                'quantity': ['Few (1-3)', 'Moderate (4-6)', 'Many (7+)']
            },
            'emojis': {
                'include': ['Yes', 'No'],
                'style': ['Faces', 'Animals', 'Objects', 'Symbols', 'Mixed'],
                'quantity': ['Few (1-3)', 'Moderate (4-6)', 'Many (7+)']
            },
            'mention_users': ['Yes', 'No'],
            'call_to_action': ['Yes', 'No'],
            'length': ['Short', 'Medium', 'Long'],
            'personalization': ['Personal Anecdote', 'Inclusive', 'General', 'None']
        },

        'articles': {
            'genre': [
                'Informative', 'Opinion', 'Review', 'News', 'How-to', 'Listicle',
                'Interview', 'Expository', 'Narrative', 'Research', 'Editorial',
                'Personal Essay', 'Case Study'
            ],
            'topic': 'User-defined input',  # Users can input a specific topic or keyword
            'audience': [
                'General Audience', 'Specialized', 'Academic', 'Professionals',
                'Students', 'Industry Experts', 'Enthusiasts', 'Beginners'
            ],
            'length': ['Short (300-500 words)', 'Medium (500-1000 words)', 'Long (1000+ words)'],
            'tone': [
                'Neutral', 'Formal', 'Conversational', 'Authoritative', 'Persuasive',
                'Friendly', 'Humorous', 'Inspirational', 'Critical', 'Reflective'
            ],
            'writing_style': ['Third Person', 'First Person', 'Second Person'],
            'structure': [
                'Standard (Introduction, Body, Conclusion)', 'Inverted Pyramid', 'Q&A Format',
                'Problem-Solution', 'Chronological'
            ],
            'include_visuals': ['Yes', 'No'],  # If users want suggestions for visuals (e.g., images, graphs)
            'sources': ['Credible Sources', 'General Sources', 'No Sources'],  # Level of source credibility
            'focus_area': 'User-defined input',  # Users can input a specific focus area within the topic
            'call_to_action': ['Yes', 'No'],  # If users want to include a call-to-action at the end
            'personalization': ['Personal Anecdote', 'Inclusive', 'General', 'None']
        },

        'blog_posts': {
            'topic': [
                'User-defined input',  # Users can input a specific topic or keyword
                'Lifestyle', 'Technology', 'Health', 'Business', 'Travel', 'Food',
                'Fashion', 'Education', 'Finance', 'Entertainment', 'Personal Development',
                'Home & Garden', 'DIY', 'Parenting', 'Fitness', 'Marketing', 'Self-care',
                'Outdoors', 'Relationships', 'Art & Design', 'Gaming', 'Spirituality'
            ],
            'subtopic': 'User-defined input',  # Users can input a specific subtopic within the chosen topic
            'tone': [
                'Casual', 'Formal', 'Conversational', 'Inspirational', 'Humorous',
                'Reflective', 'Motivational', 'Informative', 'Persuasive', 'Friendly',
                'Opinionated', 'Nostalgic', 'Relatable', 'Empathetic'
            ],
            'format': [
                'Listicle', 'How-to', 'Story', 'Guide', 'Review', 'Interview', 'Case Study',
                'Opinion Piece', 'Comparison', 'Round-up', 'Research', 'Personal Experience',
                'FAQ', 'Q&A', 'Thought Leadership', 'Problem-Solution'
            ],
            'audience': [
                'General Audience', 'Specialized', 'Hobbyists', 'Enthusiasts', 'Beginners',
                'Experts', 'Professionals', 'Students', 'Parents', 'Entrepreneurs', 'Couples'
            ],
            'length': ['Short (300-500 words)', 'Medium (500-1000 words)', 'Long (1000+ words)'],
            'writing_style': ['First Person', 'Second Person', 'Third Person'],
            'media_inclusion': [
                'Images', 'Videos', 'Infographics', 'None', 'User-defined input'
                # Users can specify the type of media they want to include
            ],
            'call_to_action': ['Yes', 'No'],  # If users want to include a call-to-action at the end
            'target_keywords': 'User-defined input',  # Users can input specific keywords for SEO
            'personal_anecdotes': ['Yes', 'No']  # If users want to include personal stories or experiences
        },

        'linkedin_posts': {
            'purpose': [
                'Networking', 'Promotion', 'Job Seeking', 'Sharing Knowledge', 'Celebrating Success',
                'Industry Insights', 'Event Announcement', 'Thought Leadership', 'Company Updates',
                'Product Launch', 'Employee Recognition', 'Case Study', 'Personal Branding'
            ],
            'tone': [
                'Professional', 'Friendly', 'Inspirational', 'Authoritative', 'Motivational',
                'Appreciative', 'Inquisitive', 'Encouraging', 'Inviting', 'Informative',
                'Supportive', 'Conversational', 'Enthusiastic'
            ],
            'format': [
                'Text', 'Image', 'Link', 'Video', 'Article', 'Infographic', 'Document', 'Poll'
            ],
            'audience': [
                'General Audience', 'Industry Professionals', 'Peers', 'Clients', 'Recruiters',
                'Potential Employers', 'Investors', 'Partners', 'Job Seekers', 'Team Members',
                'Company Followers'
            ],
            'post_length': ['Short (50-130 characters)', 'Medium (130-700 characters)', 'Long (700+ characters)'],
            'include_hashtags': ['Yes', 'No'],
            'hashtag_suggestions': 'User-defined input',  # Users can input specific hashtags they want to use
            'mention_others': ['Yes', 'No'],  # If users want to mention/tag other LinkedIn users in the post
            'mention_suggestions': 'User-defined input',  # Users can input specific mentions they want to use
            'call_to_action': ['Yes', 'No'],  # If users want to include a call-to-action at the end
            'call_to_action_text': 'User-defined input'  # Users can input specific CTA text
        },

        'reddit_posts': {
            'subreddit': 'User-defined input',  # Users can input the specific subreddit they want to post in
            'post_type': [
                'Text', 'Image', 'Link', 'Video', 'Poll', 'Gallery'
            ],
            'tone': [
                'Humorous', 'Informative', 'Discussion', 'Debate', 'Question', 'Storytelling',
                'Advice', 'Supportive', 'Personal Experience', 'Satirical', 'Inspirational',
                'Rant', 'News', 'Review', 'Announcement'
            ],
            'audience': [
                'General Audience', 'Specialized Audience', 'Niche Community', 'Experts', 'Hobbyists',
                'Enthusiasts', 'Supporters', 'Critics', 'Local Community', 'Global Community'
            ],
            'post_length': ['Short', 'Medium', 'Long'],
            'include_link': ['Yes', 'No'],  # If users want to include an external link in the post
            'link_url': 'User-defined input',  # Users can input the specific URL they want to include
            'include_image': ['Yes', 'No'],  # If users want to include an image in the post
            'image_source': 'User-defined input',  # Users can input the source path/URL for the image
            'spoiler_alert': ['Yes', 'No'],  # If the post contains spoilers, users can mark it as a spoiler
            'nsfw_content': ['Yes', 'No'],  # If the post contains NSFW content, users can mark it as NSFW
            'flair': 'User-defined input',  # Users can input the specific flair they want to assign to the post
            'title': 'User-defined input',  # Users can input the specific title they want for the post
            'content': 'User-defined input'  # Users can input the content of the post (relevant for text posts)
        },

        'facebook_posts': {
            'post_type': [
                'Status Update', 'Event', 'Poll', 'Photo', 'Video', 'Link', 'Check-in', 'Recommendation',
                'Product Offer'
            ],
            'audience': [
                'Public', 'Friends', 'Custom', 'Only Me', 'Specific Friends', 'Friends Except', 'Local Community'
            ],
            'tone': [
                'Casual', 'Informative', 'Promotional', 'Emotional', 'Inspirational', 'Announcement', 'Humorous',
                'Supportive', 'Storytelling', 'Gratitude', 'Invitation', 'News', 'Review'
            ],
            'post_length': ['Short', 'Medium', 'Long'],
            'language': ['English', 'Spanish', 'French', 'User-defined input'],  # Users can specify the language
            'include_cta_button': ['Yes', 'No'],  # If users want to include a call-to-action (CTA) button
            'cta_button_text': 'User-defined input',  # Users can input the specific text for the CTA button
            'cta_button_link': 'User-defined input',  # Users can input the URL for the CTA button
            'include_hashtags': ['Yes', 'No'],  # If users want to include hashtags in the post
            'hashtags': 'User-defined input',  # Users can input the hashtags they want to include
            'tag_friends': ['Yes', 'No'],  # If users want to tag friends in the post
            'tagged_friends': 'User-defined input',  # Users can input the names of friends to tag
            'schedule_post': ['Yes', 'No'],  # If users want to schedule the post for later
            'schedule_date_time': 'User-defined input',  # Users can input the specific date and time to schedule
            'caption': 'User-defined input',  # Users can input the caption for the post
            'content': 'User-defined input'  # Users can input the content of the post (relevant for text posts)
        },

        'product_descriptions': {
            'product_type': [
                'Physical Product', 'Digital Product', 'Service', 'Subscription', 'Software', 'App', 'Course',
                'Membership'
            ],
            'product_category': 'User-defined input',
            # Users can specify the product category (e.g., Electronics, Beauty)
            'tone': [
                'Persuasive', 'Informative', 'Luxurious', 'Fun', 'Elegant', 'Professional', 'Friendly', 'Technical',
                'Aspirational', 'Casual', 'Conversational', 'Storytelling', 'Promotional'
            ],
            'length': ['Short', 'Detailed', 'Extended'],
            'language': ['English', 'Spanish', 'French', 'User-defined input'],  # Users can specify the language
            'target_audience': ['Adults', 'Teens', 'Children', 'Professionals', 'User-defined input'],
            'include_benefits': ['Yes', 'No'],  # If users want to highlight product benefits
            'include_features': ['Yes', 'No'],  # If users want to highlight product features
            'include_usp': ['Yes', 'No'],  # If users want to highlight the unique selling proposition (USP)
            'include_price': ['Yes', 'No'],  # If users want to include the price of the product
            'product_price': 'User-defined input',  # Users can specify the product price
            'include_cta': ['Yes', 'No'],  # If users want to include a call-to-action (CTA) in the description
            'cta_text': 'User-defined input',  # Users can specify the text for the CTA
            'product_name': 'User-defined input',  # Users can specify the name of the product
            'product_details': 'User-defined input',  # Users can specify additional details about the product
        },

        'twitter_posts': {
            'tweet_type': [
                'Text', 'Reply', 'Retweet', 'Image', 'Video', 'Poll', 'GIF', 'Thread'
            ],
            'tone': [
                'Humorous', 'Informative', 'Opinionated', 'Motivational', 'Sarcastic', 'Promotional', 'Friendly',
                'Newsy',
                'Casual', 'Conversational', 'Professional', 'Advocacy'
            ],
            'hashtags': ['Yes', 'No'],
            'hashtags_input': 'User-defined input',  # Users can specify the hashtags to include
            'mentions': ['Yes', 'No'],
            'mentions_input': 'User-defined input',  # Users can specify the users to mention
            'include_link': ['Yes', 'No'],
            'link_input': 'User-defined input',  # Users can specify the link to include
            'target_audience': ['General', 'Specific Group', 'User-defined input'],
            # Users can specify the target audience
            'campaign': ['Yes', 'No'],  # If the tweet is part of a marketing campaign
            'campaign_name': 'User-defined input',  # Users can specify the name of the campaign
            'tweet_length': ['Short', 'Medium', 'Long'],  # Users can specify the desired length of the tweet
            'event_related': ['Yes', 'No'],  # If the tweet is related to a specific event
            'event_name': 'User-defined input',  # Users can specify the name of the event
            'schedule_time': 'User-defined input',
            # Users can specify the desired time to schedule the tweet (optional)
            'content_prompt': 'User-defined input',  # Users can provide a prompt for the tweet content (optional)
        },

        'youtube_video_ideas': {
            'genre': [
                'Vlog', 'Tutorial', 'Gaming', 'Review', 'Travel', 'Lifestyle', 'Unboxing', 'Challenge',
                'Cooking', 'Fitness', 'DIY', 'Educational', 'Comedy', 'Animation', 'Documentary', 'Music',
                'Beauty', 'Tech', 'Fashion', 'Reaction', 'Q&A', 'Motivational', 'Storytime', 'ASMR', 'Haul'
            ],
            'subgenre': 'User-defined input',
            # Users can specify a subgenre or niche within the chosen genre (optional)
            'tone': [
                'Entertaining', 'Informative', 'Inspirational', 'Casual', 'Professional', 'Humorous', 'Serious',
                'Relaxed', 'Energetic', 'Narrative', 'Artistic', 'Conversational'
            ],
            'audience': ['Kids', 'Teens', 'Adults', 'Families', 'Professionals', 'General', 'User-defined input'],
            'target_demographics': 'User-defined input',
            # Users can specify target demographics (e.g., age, gender, interests)
            'length': ['Short', 'Medium', 'Long'],
            'video_format': ['Live', 'Premiere', 'Pre-recorded', '360°', 'VR', 'Time-lapse'],
            'collaboration': ['Yes', 'No'],  # If the video idea involves collaboration with other creators
            'collaborator_type': 'User-defined input',
            # Users can specify the type of collaborators they want (optional)
            'location_setting': 'User-defined input',
            # Users can specify the desired location or setting for the video (optional)
            'keywords': 'User-defined input',
            # Users can provide specific keywords or topics they want to include (optional)
            'content_prompt': 'User-defined input',  # Users can provide a prompt or theme for the video idea (optional)
            'special_equipment': 'User-defined input',
            # Users can specify any special equipment needed for the video (optional)
        },

        'email_campaigns': {
            'purpose': [
                'Newsletter', 'Promotion', 'Announcement', 'Survey', 'Invitation', 'Event', 'Product Launch',
                'Re-engagement', 'Welcome', 'Onboarding', 'Abandoned Cart', 'Seasonal', 'Content Sharing',
                'Lead Nurturing', 'Webinar', 'Educational', 'Drip Campaign', 'Upsell/Cross-sell', 'Customer Retention'
            ],
            'audience': ['Subscribers', 'Customers', 'Partners', 'Leads', 'Members', 'Donors', 'User-defined input'],
            'audience_segment': 'User-defined input',
            # Users can specify a specific segment within the audience (optional)
            'tone': ['Formal', 'Friendly', 'Sales-Oriented', 'Informative', 'Conversational', 'Motivational',
                     'Personal'],
            'subject_line_style': ['Direct', 'Curiosity', 'Benefit-driven', 'Urgency/Scarcity', 'Personalization'],
            'personalization': ['Yes', 'No'],  # If the email content should include personalized elements
            'call_to_action': ['Yes', 'No'],  # If the email should include a specific call to action (CTA)
            'cta_text': 'User-defined input',  # Users can specify the desired call-to-action text (optional)
            'visuals': ['Images', 'GIFs', 'Videos', 'None'],  # Visual elements to include in the email
            'email_format': ['HTML', 'Plain Text'],  # Format of the email content
            'keywords': 'User-defined input',
            # Users can provide specific keywords or topics they want to include (optional)
            'content_prompt': 'User-defined input',
            # Users can provide a prompt or theme for the email campaign (optional)
        },

        'advertisements': {
            'tone': [
                'Persuasive', 'Informative', 'Emotional', 'Luxurious', 'Humorous',
                'Urgent', 'Friendly', 'Authoritative', 'Fear Appeal', 'Rational'
            ],
            'audience': [
                'General Public', 'Young Adults', 'Professionals', 'Parents',
                'Seniors', 'Business Owners', 'Travelers', 'Athletes', 'Health Conscious', 'Students'
            ],
            'length': [
                'Short (1-2 sentences)', 'Medium (2-4 sentences)', 'Long (4+ sentences)'
            ],
            'format': [
                'Image Ad', 'Video Ad', 'Text Ad', 'Carousel Ad', 'Banner Ad',
                'Native Ad', 'Interstitial Ad', 'Email Ad', 'Influencer Ad', 'Display Ad'
            ],
            'platform': [
                'Facebook', 'Instagram', 'Twitter', 'YouTube', 'Google',
                'LinkedIn', 'Snapchat', 'Pinterest', 'TikTok', 'Email'
            ],
            'call_to_action': [
                'Shop Now', 'Learn More', 'Sign Up', 'Get Offer', 'Contact Us',
                'Download', 'Discover', 'Join Us', 'Book Now', 'Subscribe'
            ],
            'product_category': [
                'Fashion', 'Electronics', 'Health & Beauty', 'Food & Beverage', 'Automotive',
                'Travel', 'Real Estate', 'Education', 'Finance', 'Entertainment'
            ]
        }

    }

    # Pass content_generation_options to the render_template function
    return render_template('dashboard.html', tab=tab, content_generation_options=content_generation_options)


@bp.route('/dashboard/generate', methods=['POST'])
@login_required
def generate_content():
    # Extract input parameters from the request
    content_type = request.json.get('contentType')
    settings = request.json.get('settings')

    # Placeholder for content generation logic based on input parameters and content_generation_options
    generated_content = generate_content_based_on_options(content_type, settings)

    # Return the generated content as JSON
    return jsonify({'content': generated_content})


def generate_content_based_on_options(content_type, settings):
    # Construct a prompt based on input parameters
    prompt = f"As an AI language model, please generate {content_type} content with the following settings:\n{settings}\n\nGenerated Content:"

    # Define the GPT API endpoint and headers
    api_endpoint = "https://api.openai.com/v1/engines/text-davinci-003/completions"
    api_key = "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"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    # Define the payload for the GPT API request
    payload = {
        "prompt": prompt,
        "max_tokens": 3000,  # Increase the token limit for longer responses
        "temperature": 0.5,  # Set the temperature value (can be adjusted as needed)
    }

    # Call the GPT API to generate content based on the constructed prompt
    response = requests.post(api_endpoint, json=payload, headers=headers)

    # Extract the generated content from the API response
    generated_content = response.json().get("choices", [{}])[0].get("text", "").strip()

    # Return the generated content
    return generated_content


@bp.route('/regenerate-content', methods=['POST'])
@login_required
def regenerate_content():
    # Extract input parameters from the request's JSON payload
    content_type = request.json.get('contentType')
    settings = request.json.get('settings', {})

    # Call the existing function to regenerate content based on input parameters
    regenerated_content = generate_content_based_on_options(content_type, settings)

    # Return the regenerated content as JSON
    return jsonify(content=regenerated_content)


@bp.route('/save-content', methods=['POST'])
@login_required
def save_content():
    # Extract the generated content data from the request's JSON payload
    content_data = request.json

    # Create a new content entry
    new_content = GeneratedContent(
        content_type=content_data.get('type'),
        text=content_data.get('text'),
        user_id=current_user.id  # Associate the content with the current user
    )

    # Add and commit the new content to the database
    db.session.add(new_content)
    db.session.commit()

    # Return a success response
    return jsonify(success=True, message='Content successfully saved to your library.')


@bp.route('/dashboard/my-content')
@login_required
def my_content():
    # Logic for displaying user-generated content
    return redirect(url_for('main.dashboard', tab='my_content'))


@bp.route('/dashboard/learn')
@login_required
def learn():
    # Logic for displaying learning resources
    return redirect(url_for('main.dashboard', tab='learn'))


@bp.route('/dashboard/settings')
@login_required
def settings():
    # Logic for displaying user settings
    return redirect(url_for('main.dashboard', tab='settings'))


@bp.route('/dashboard/account')
@login_required
def account():
    # Logic for displaying account information
    return redirect(url_for('main.dashboard', tab='account'))


@bp.route('/dashboard/help')
@login_required
def help():
    # Logic for displaying help information
    return redirect(url_for('main.dashboard', tab='help'))


auth_bp = Blueprint('auth', __name__, url_prefix='/auth')


@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('auth.login'))
        login_user(user, remember=form.remember_me.data)
        return redirect(url_for('main.dashboard'))
    return render_template('login.html', form=form)


@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(username=form.username.data, email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('Congratulations, you are now a registered user!')
        return redirect(url_for('auth.login'))
    return render_template('register.html', form=form)


@auth_bp.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('main.home'))"
    
.flaskenv: "<Still needs to be made>"

run.py: "<Still needs to be made>"

requirements.txt: "<Still needs to be made>"
